''' 
Simple starter program that uses the gdx functions to collect data from a Go Direct device 
connected via Bluetooth. 

When using gdx.open(), note it has two arguments that can be set. They are 'connection' 
and 'device_to_open'. Here are some ways to configure gdx.open() for a bluetooth connection:

gdx.open(connection='ble')
            When the 'device_to_open' argument is left blank, the function 
            finds all available Go Direct ble devices. If only one device is found it will
            automatically connect to that device. If more than one device is found it prints 
            the list to the terminal, and prompts the user to select the device to connect.

gdx.open(connection='ble', device_to_open='GDX-FOR 071000U9')
            Use your device's name as the argument. The function will search for a ble device 
            with this name. If found it will connect it. If connecting to multiple devices 
            separate the names with a comma, such as device_to_open='GDX-FOR 071000U9, GDX-HD 151000C1'

gdx.open(connection='ble', device_to_open='proximity_pairing')
            Use "proximity_pairing" as the argument and the function will find the ble device 
            with the strongest rssi (signal strength) and connect that device.

Tip: Skip the prompts to select the sensors and period by entering arguments in the functions.

Example 1, collect data from sensor 1 at a period of 1000ms using:
gdx.select_sensors([1])
gdx.start(1000)

Example 2, collect data from sensors 1, 2 and 3 at a period of 100ms using:
gdx.select_sensors([1,2,3])
gdx.start(100)
'''

from gdx import gdx
lef = gdx.gdx()
  
#Device we have
lef.open(connection='ble', device_to_open='GDX-RMS 0L101276, GDX-RMS 0L1013L7')
#ANGLE (High solution), not sure what this means yet, perhaps radians
lef.select_sensors([[6],[6]])
#Sampling rate of 100 ms(miliseconds)
lef.start(11)

while True:
    try:
        measurements = lef.read()
        if measurements == None:
            break 
        print(measurements[0])
    except KeyboardInterrupt:
        break

lef.stop()
lef.close()
